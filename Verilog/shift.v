// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module iv_shift_l_2_2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        op1_0_read,
        op1_1_read,
        op2
);

parameter    ap_ST_fsm_state1 = 2'b1;
parameter    ap_ST_fsm_state2 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_1 = 2'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [22:0] op1_0_read;
input  [0:0] op1_1_read;
input  [4:0] op2;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [0:0] tmp_5_fu_64_p2;
reg   [0:0] tmp_5_reg_94;
wire   [1:0] i_2_fu_76_p2;
wire   [0:0] ap_CS_fsm_state2;
wire   [1:0] i_1_fu_88_p2;
reg   [1:0] i_reg_42;
wire   [0:0] tmp_1_fu_70_p2;
reg   [1:0] i1_reg_53;
wire   [0:0] tmp_7_fu_82_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & ~(tmp_5_fu_64_p2 == 1'b0))) begin
        i1_reg_53 <= ap_const_lv2_0;
    end else if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_5_reg_94 == 1'b0) & (1'b0 == tmp_7_fu_82_p2))) begin
        i1_reg_53 <= i_1_fu_88_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & (tmp_5_fu_64_p2 == 1'b0))) begin
        i_reg_42 <= ap_const_lv2_0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_5_reg_94 == 1'b0) & (1'b0 == tmp_1_fu_70_p2))) begin
        i_reg_42 <= i_2_fu_76_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        tmp_5_reg_94 <= tmp_5_fu_64_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (((tmp_5_reg_94 == 1'b0) & ~(1'b0 == tmp_1_fu_70_p2)) | (~(tmp_5_reg_94 == 1'b0) & ~(1'b0 == tmp_7_fu_82_p2)))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (((tmp_5_reg_94 == 1'b0) & ~(1'b0 == tmp_1_fu_70_p2)) | (~(tmp_5_reg_94 == 1'b0) & ~(1'b0 == tmp_7_fu_82_p2))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((((tmp_5_reg_94 == 1'b0) & ~(1'b0 == tmp_1_fu_70_p2)) | (~(tmp_5_reg_94 == 1'b0) & ~(1'b0 == tmp_7_fu_82_p2)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign i_1_fu_88_p2 = (i1_reg_53 + ap_const_lv2_1);

assign i_2_fu_76_p2 = (i_reg_42 + ap_const_lv2_1);

assign tmp_1_fu_70_p2 = ((i_reg_42 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign tmp_5_fu_64_p2 = ((op2 == ap_const_lv5_0) ? 1'b1 : 1'b0);

assign tmp_7_fu_82_p2 = ((i1_reg_53 == ap_const_lv2_2) ? 1'b1 : 1'b0);

endmodule //iv_shift_l_2_2_s
