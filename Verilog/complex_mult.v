// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module complex_mult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5
);

parameter    ap_ST_fsm_state1 = 7'b1;
parameter    ap_ST_fsm_state2 = 7'b10;
parameter    ap_ST_fsm_state3 = 7'b100;
parameter    ap_ST_fsm_state4 = 7'b1000;
parameter    ap_ST_fsm_state5 = 7'b10000;
parameter    ap_ST_fsm_state6 = 7'b100000;
parameter    ap_ST_fsm_state7 = 7'b1000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10; //for states
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_16 = 32'b10110; //for sign bit

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [9:0] p_read;
input  [9:0] p_read1;
input  [3:0] p_read2;
input  [11:0] p_read3;
input  [11:0] p_read4;
input  [3:0] p_read5;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;   //Current state is 1 of the state machine
reg  signed [11:0] p_read_2_reg_155; //input wire
reg  signed [11:0] p_read_3_reg_160; //input wire reg
reg   [9:0] p_read_5_reg_165;
wire   [0:0] ap_CS_fsm_state3; //Current state is 3 of the state machine
wire  signed [22:0] grp_fu_127_p3;
reg  signed [22:0] d_mul_a_min_b_v_0_reg_185;
wire   [0:0] ap_CS_fsm_state4; //Current state is 4 of the state machine
wire  signed [22:0] grp_fu_135_p4; //output of wrapperSingle48_acud_U5
reg   [22:0] tmp_i_reg_191; //temp reg of grp_fu_135_p4.
wire   [0:0] ap_CS_fsm_state5;
wire  signed [22:0] grp_fu_145_p4;
reg   [22:0] tmp_i1_reg_196;
wire   [4:0] sum_exp_v_0_fu_107_p2;
reg   [4:0] sum_exp_v_0_reg_201;
reg   [0:0] tmp_reg_207;
reg   [0:0] tmp_24_reg_212;
wire    grp_iv_shift_l_2_2_s_fu_60_ap_start;
wire    grp_iv_shift_l_2_2_s_fu_60_ap_done;
wire    grp_iv_shift_l_2_2_s_fu_60_ap_idle;
wire    grp_iv_shift_l_2_2_s_fu_60_ap_ready;
wire    grp_iv_shift_l_2_2_s_fu_67_ap_start;
wire    grp_iv_shift_l_2_2_s_fu_67_ap_done;
wire    grp_iv_shift_l_2_2_s_fu_67_ap_idle;
wire    grp_iv_shift_l_2_2_s_fu_67_ap_ready;
reg    ap_reg_grp_iv_shift_l_2_2_s_fu_60_ap_start;
wire   [0:0] ap_CS_fsm_state6;
wire   [0:0] ap_CS_fsm_state7;
reg    ap_reg_grp_iv_shift_l_2_2_s_fu_67_ap_start;
wire   [4:0] p_read5_cast_fu_99_p1;
wire   [4:0] p_read2_cast_fu_103_p1;
wire  signed [9:0] grp_fu_135_p0;
wire  signed [10:0] p_read_cast1_fu_89_p1;
wire  signed [9:0] grp_fu_135_p1;
wire  signed [10:0] p_read1_cast2_fu_86_p1;
wire  signed [9:0] grp_fu_145_p0;
wire  signed [9:0] grp_fu_145_p1;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'b1;
#0 ap_reg_grp_iv_shift_l_2_2_s_fu_60_ap_start = 1'b0; //real part
#0 ap_reg_grp_iv_shift_l_2_2_s_fu_67_ap_start = 1'b0; //im part
end

iv_shift_l_2_2_s grp_iv_shift_l_2_2_s_fu_60(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_iv_shift_l_2_2_s_fu_60_ap_start),
    .ap_done(grp_iv_shift_l_2_2_s_fu_60_ap_done),
    .ap_idle(grp_iv_shift_l_2_2_s_fu_60_ap_idle),
    .ap_ready(grp_iv_shift_l_2_2_s_fu_60_ap_ready),
    .op1_0_read(tmp_i_reg_191),
    .op1_1_read(tmp_reg_207),
    .op2(sum_exp_v_0_reg_201)
);

iv_shift_l_2_2_s grp_iv_shift_l_2_2_s_fu_67(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_iv_shift_l_2_2_s_fu_67_ap_start),
    .ap_done(grp_iv_shift_l_2_2_s_fu_67_ap_done),
    .ap_idle(grp_iv_shift_l_2_2_s_fu_67_ap_idle),
    .ap_ready(grp_iv_shift_l_2_2_s_fu_67_ap_ready),
    .op1_0_read(tmp_i1_reg_196),
    .op1_1_read(tmp_24_reg_212),
    .op2(sum_exp_v_0_reg_201)
);

wrapperSingle48_abkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 23 ))
wrapperSingle48_abkb_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_read3),
    .din1(p_read4),
    .din2(p_read1),
    .ce(1'b1),
    .dout(grp_fu_127_p3)
);

wrapperSingle48_acud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 23 ),
    .dout_WIDTH( 23 ))
wrapperSingle48_acud_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_135_p0), // = a
    .din1(grp_fu_135_p1), // = d
    .din2(p_read_3_reg_160), // = b
    .din3(d_mul_a_min_b_v_0_reg_185),// = c
    .ce(1'b1),
    .dout(grp_fu_135_p4)
);

wrapperSingle48_adEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 23 ),
    .dout_WIDTH( 23 ))
wrapperSingle48_adEe_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_145_p0),
    .din1(grp_fu_145_p1),
    .din2(p_read_2_reg_155),
    .din3(d_mul_a_min_b_v_0_reg_185),
    .ce(1'b1),
    .dout(grp_fu_145_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin //kijk naar reset en zet shift_start op nul voor real part
    if (ap_rst == 1'b1) begin
        ap_reg_grp_iv_shift_l_2_2_s_fu_60_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin //als STATE 6 == 1 => shitf_start op 1.
            ap_reg_grp_iv_shift_l_2_2_s_fu_60_ap_start <= 1'b1;
        end else if ((1'b1 == grp_iv_shift_l_2_2_s_fu_60_ap_ready)) begin //als shift_ready == 1 => zet shift_start op 0.
            ap_reg_grp_iv_shift_l_2_2_s_fu_60_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin //kijk naar reset en zet shift_start op nul voor im part
    if (ap_rst == 1'b1) begin
        ap_reg_grp_iv_shift_l_2_2_s_fu_67_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin 
            ap_reg_grp_iv_shift_l_2_2_s_fu_67_ap_start <= 1'b1;
        end else if ((1'b1 == grp_iv_shift_l_2_2_s_fu_67_ap_ready)) begin //als shift_ready == 1 => zet shift_start op 0.
            ap_reg_grp_iv_shift_l_2_2_s_fu_67_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin //STATE 4
    if ((1'b1 == ap_CS_fsm_state4)) begin
        d_mul_a_min_b_v_0_reg_185 <= grp_fu_127_p3; //de uitkomst van wrapper_single_line48_adkb
    end
end

always @ (posedge ap_clk) begin //als STATE==1 en start==1, lees signalen binnen in de p_read.
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        p_read_2_reg_155 <= p_read4;
        p_read_3_reg_160 <= p_read3;
        p_read_5_reg_165 <= p_read1;
    end
end

always @ (posedge ap_clk) begin //STATE 5:
    if ((1'b1 == ap_CS_fsm_state5)) begin 
        sum_exp_v_0_reg_201 <= sum_exp_v_0_fu_107_p2; //sum_exp in reg
        tmp_24_reg_212 <= grp_fu_145_p4[ap_const_lv32_16]; //signbit van de output van de WrapperSingle48_acud_U5 
        tmp_i1_reg_196 <= grp_fu_145_p4; //output tvan de wrapperSingle48_adEe_U6 = (a-d)*b
        tmp_i_reg_191 <= grp_fu_135_p4; //output of the wrapperSingle48_acud_U5
        tmp_reg_207 <= grp_fu_135_p4[ap_const_lv32_16]; //signbit van de output van de wrapperSingle48_adEe_U6
    end
end

always @ (*) begin //set ap_done als start == 0 en state == 1
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin //set ap_idle als start ==0 en STATE == 1.
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin //STATE 7: als STATE7 ==1 & ~(shift_im == 0 of shift_re == 0) => set ap_ready
    if (((1'b1 == ap_CS_fsm_state7) & ~((1'b0 == grp_iv_shift_l_2_2_s_fu_60_ap_done) | (1'b0 == grp_iv_shift_l_2_2_s_fu_67_ap_done)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin //state machine transitions
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (~((1'b0 == grp_iv_shift_l_2_2_s_fu_60_ap_done) | (1'b0 == grp_iv_shift_l_2_2_s_fu_67_ap_done))) begin //shift is gedaan?
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0]; //lees state uit 7 bit register

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2]; //lees state uit 7 bit register

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3]; //lees state uit 7 bit register

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4]; //lees state uit 7 bit register

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5]; //lees state uit 7 bit register

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6]; //lees state uit 7 bit register

assign grp_fu_135_p0 = p_read_cast1_fu_89_p1; //a voor wrapperSingle48_acud_U5

assign grp_fu_135_p1 = p_read1_cast2_fu_86_p1;//d voor  wrapperSingle48_acud_U5

assign grp_fu_145_p0 = p_read1_cast2_fu_86_p1; //a voor wrapperSingle48_adEe_U6

assign grp_fu_145_p1 = p_read_cast1_fu_89_p1; //d voor wrapperSingle48_adEe_U6

assign grp_iv_shift_l_2_2_s_fu_60_ap_start = ap_reg_grp_iv_shift_l_2_2_s_fu_60_ap_start;

assign grp_iv_shift_l_2_2_s_fu_67_ap_start = ap_reg_grp_iv_shift_l_2_2_s_fu_67_ap_start;

assign p_read1_cast2_fu_86_p1 = $signed(p_read_5_reg_165); //van 10 bit input naar 11 bit signed p_read1

assign p_read2_cast_fu_103_p1 = p_read2; //sum_exp = 10 bit

assign p_read5_cast_fu_99_p1 = p_read5; //tone_exp = 10 bit

assign p_read_cast1_fu_89_p1 = $signed(p_read); //11 bit 

assign sum_exp_v_0_fu_107_p2 = (p_read5_cast_fu_99_p1 + p_read2_cast_fu_103_p1); //coef_exp + tone_exp = p_read2 + p_read5

endmodule //complex_mult
